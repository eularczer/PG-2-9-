% Then we try to remove automorphisms by function inclusive in matlab.
function[NoAutoTypemnSet]=NoAutoTypemnSet(BiGraph,AllTypemnSet)

% K is the valid column data in the cell AllTypemnSet, the last column
% records the line intersections. NumP and NumL is set as an offset to put 
% every linepoints in bipartite graph Bigraph.
global K; global P; global NumP; global NumL;

% We find every point index of AllTypemnSet in BiGraph version, find the index. 
% And add all the linepoints into it. 
% SubBiGraph is a cell to restore the subgrph generated by (m,n) set.
SubBiGraph={};
for i=1:size(AllTypemnSet,1)
    CannonicalmnSet=AllTypemnSet(i,:);
    % s is the restricted points in the subgraph SubBiGraph.
    s=[];

    % We first add all the index of points in AllTypemnSet to s.
    for j=1:K
        s=[s,find(ismember(P, CannonicalmnSet{j}, 'rows'))];
    end

    % Then we add all the linepoints which have more than 1 intersection with 
    % the pointpoints to the subgraph as nodes s. 
    NumInter=CannonicalmnSet{K+1};
    for j=1:size(NumInter,2)
        if NumInter(j)>1 s=[s,NumP+j]; end
    end
    % If m,n are both larger than 1, then we do not need to test the number
    % of points on every line, directly add all the linepoints to s is ok.
    % s=[s,[NumP+1:NumP+NumL]];

    % We check whether the new graph is automorphic to some old Cannonical
    % ones. Then we add the new point-line bipartite.
    if CheckAuto(SubBiGraph,subgraph(BiGraph,s))==0
        SubBiGraph(size(SubBiGraph,2)+1)={subgraph(BiGraph,s)};
    end    
end

% Finally we have the generated nonisomorphic graph.
NoAutoTypemnSet=SubBiGraph;



% This function input the generated Cannonical graph and a new restricted
% subgraph, and check if it is isomorphic to some cannonical ones.
function[AutoOrNot]=CheckAuto(SubBiGraph,NewSubgraph)
if size(SubBiGraph,2)==0
    AutoOrNot=0;
    return;
else
    for i=1:size(SubBiGraph,2)
        if isisomorphic(SubBiGraph{i},NewSubgraph) AutoOrNot=1; return; end
    end
    AutoOrNot=0;
end


